// Generated by Apple Swift version 5.0.1 effective-4.2 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RangeUISlider",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIImage;
@class UIColor;
@class NSCoder;
@class UIPanGestureRecognizer;

/// A custom slider with double knob that allow the user to select a range.
/// Created using autolayout and IBDesignabled/IBInspectable.
SWIFT_CLASS("_TtC13RangeUISlider13RangeUISlider")
@interface RangeUISlider : UIView
/// Slider identifier.
@property (nonatomic) NSInteger identifier;
/// Scale minimum value.
@property (nonatomic) CGFloat scaleMinValue;
/// Scale maximum value.
@property (nonatomic) CGFloat scaleMaxValue;
/// Default left knob starting value.
@property (nonatomic) CGFloat defaultValueLeftKnob;
/// Default right knob starting value.
@property (nonatomic) CGFloat defaultValueRightKnob;
/// Background range selected strechable image.
@property (nonatomic, strong) UIImage * _Nullable rangeSelectedBackgroundImage;
/// Background range selected top edge insect for background image.
@property (nonatomic) CGFloat rangeSelectedBackgroundEdgeInsetTop;
/// Background range selected left edge insect for background image.
@property (nonatomic) CGFloat rangeSelectedBackgroundEdgeInsetLeft;
/// Background range selected bottom edge insect for background image.
@property (nonatomic) CGFloat rangeSelectedBackgroundEdgeInsetBottom;
/// Background range selected right edge insect for background image.
@property (nonatomic) CGFloat rangeSelectedBackgroundEdgeInsetRight;
/// Gradient color 1 for range not selected.
@property (nonatomic, strong) UIColor * _Nullable rangeSelectedGradientColor1;
/// Gradient color 2 for range not selected.
@property (nonatomic, strong) UIColor * _Nullable rangeSelectedGradientColor2;
/// Gradient start point for not selected range.
@property (nonatomic) CGPoint rangeSelectedGradientStartPoint;
/// Gradient end point for not selected range.
@property (nonatomic) CGPoint rangeSelectedGradientEndPoint;
/// Not selected range color.
@property (nonatomic, strong) UIColor * _Nonnull rangeNotSelectedColor;
/// Background range selected strechable image.
@property (nonatomic, strong) UIImage * _Nullable rangeNotSelectedBackgroundImage;
/// Background range selected top edge insect for background image.
@property (nonatomic) CGFloat rangeNotSelectedBackgroundEdgeInsetTop;
/// Background range selected left edge insect for background image.
@property (nonatomic) CGFloat rangeNotSelectedBackgroundEdgeInsetLeft;
/// Background range selected bottom edge insect for background image.
@property (nonatomic) CGFloat rangeNotSelectedBackgroundEdgeInsetBottom;
/// Background range selected right edge insect for background image.
@property (nonatomic) CGFloat rangeNotSelectedBackgroundEdgeInsetRight;
/// Gradient color 1 for range not selected.
@property (nonatomic, strong) UIColor * _Nullable rangeNotSelectedGradientColor1;
/// Gradient color 2 for range not selected.
@property (nonatomic, strong) UIColor * _Nullable rangeNotSelectedGradientColor2;
/// Gradient start point for not selected range.
@property (nonatomic) CGPoint rangeNotSelectedGradientStartPoint;
/// Gradient end point for not selected range.
@property (nonatomic) CGPoint rangeNotSelectedGradientEndPoint;
/// Left knob width.
@property (nonatomic) CGFloat leftKnobWidth;
/// Left knob height.
@property (nonatomic) CGFloat leftKnobHeight;
/// Left knob corners.
@property (nonatomic) CGFloat leftKnobCorners;
/// Left knob image.
@property (nonatomic, strong) UIImage * _Nullable leftKnobImage;
/// Left knob color.
@property (nonatomic, strong) UIColor * _Nonnull leftKnobColor;
/// Left knob shadow opacity.
@property (nonatomic) float leftShadowOpacity;
/// Left knob shadow color.
@property (nonatomic, strong) UIColor * _Nonnull leftShadowColor;
/// Left knob shadow offset.
@property (nonatomic) CGSize leftShadowOffset;
/// Left knob shadow radius.
@property (nonatomic) CGFloat leftShadowRadius;
/// Gradient color 1 for range not selected.
@property (nonatomic, strong) UIColor * _Nullable leftKnobGradientColor1;
/// Gradient color 2 for range not selected.
@property (nonatomic, strong) UIColor * _Nullable leftKnobGradientColor2;
/// Gradient start point for not selected range.
@property (nonatomic) CGPoint leftKnobGradientStartPoint;
/// Gradient end point for not selected range.
@property (nonatomic) CGPoint leftKnobGradientEndPoint;
/// Left knob border width.
@property (nonatomic) CGFloat leftKnobBorderWidth;
/// Left knob border color.
@property (nonatomic, strong) UIColor * _Nonnull leftKnobBorderColor;
/// Right knob width.
@property (nonatomic) CGFloat rightKnobWidth;
/// Right knob height.
@property (nonatomic) CGFloat rightKnobHeight;
/// Right knob corners.
@property (nonatomic) CGFloat rightKnobCorners;
/// Right knob image.
@property (nonatomic, strong) UIImage * _Nullable rightKnobImage;
/// Right knob color.
@property (nonatomic, strong) UIColor * _Nonnull rightKnobColor;
/// Right knob shadow opacity.
@property (nonatomic) float rightShadowOpacity;
/// Right knob shadow color.
@property (nonatomic, strong) UIColor * _Nonnull rightShadowColor;
/// Right knob shadow offset.
@property (nonatomic) CGSize rightShadowOffset;
/// Right knob shadow radius.
@property (nonatomic) CGFloat rightShadowRadius;
/// Gradient color 1 for range not selected.
@property (nonatomic, strong) UIColor * _Nullable rightKnobGradientColor1;
/// Gradient color 2 for range not selected.
@property (nonatomic, strong) UIColor * _Nullable rightKnobGradientColor2;
/// Gradient start point for not selected range.
@property (nonatomic) CGPoint rightKnobGradientStartPoint;
/// Gradient end point for not selected range.
@property (nonatomic) CGPoint rightKnobGradientEndPoint;
/// Right knob border width.
@property (nonatomic) CGFloat rightKnobBorderWidth;
/// Right knob border color.
@property (nonatomic, strong) UIColor * _Nonnull rightKnobBorderColor;
/// Bar height.
@property (nonatomic) CGFloat barHeight;
/// Bar leading offset.
@property (nonatomic) CGFloat barLeading;
/// Bar trailing offset.
@property (nonatomic) CGFloat barTrailing;
/// Bar corners.
@property (nonatomic) CGFloat barCorners;
/// Bar shadow opacity.
@property (nonatomic) float barShadowOpacity;
/// Bar shadow color.
@property (nonatomic, strong) UIColor * _Nonnull barShadowColor;
/// Bar shadow offset.
@property (nonatomic) CGSize barShadowOffset;
/// Bar shadow radius.
@property (nonatomic) CGFloat barShadowRadius;
/// Bar border color.
@property (nonatomic) CGFloat barBorderWidth;
/// Bar border color.
@property (nonatomic, strong) UIColor * _Nonnull barBorderColor;
/// Container corners.
@property (nonatomic) CGFloat containerCorners;
/// Standard init using coder.
/// \param aDecoder the decoder used to init the sliders.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Standard init using a CGRect.
/// \param frame the frame used to init the slider.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Method used to prepare fake values for interface builder preview.
- (void)prepareForInterfaceBuilder;
/// Method used to layout precisely the subview.
/// Used here to set the starting values of the knob.
- (void)layoutSubviews;
/// Method used to respond to the gesture recognizer attached on the left knob.
/// \param gestureRecognizer the gesture recognizer that uses this method as selector.
///
- (void)moveLeftKnobWithGestureRecognizer:(UIPanGestureRecognizer * _Nonnull)gestureRecognizer;
/// Method used to respond to the gesture recognizer attached on the right knob.
/// \param gestureRecognizer the gesture recognizer that uses this method as selector.
///
- (void)moveRightKnobWithGestureRecognizer:(UIPanGestureRecognizer * _Nonnull)gestureRecognizer;
@end


/// Protocol used delegate the read of the RangeUISlider data. Multiple RangeUISlider instance could use the same delegate.
/// The current slider (on which the user is tapping) is returned in all the methods (so that could be identified on the
/// delegate class).
SWIFT_PROTOCOL("_TtP13RangeUISlider21RangeUISliderDelegate_")
@protocol RangeUISliderDelegate
@optional
/// Calls the delegate when the user is changing the range by moving the knobs.
/// \param minValueSelected the minimum value selected.
///
/// \param maxValueSelected the maximum value selected.
///
/// \param slider the slider on which the range has been modified.
///
- (void)rangeIsChangingWithMinValueSelected:(CGFloat)minValueSelected maxValueSelected:(CGFloat)maxValueSelected slider:(RangeUISlider * _Nonnull)slider;
@required
/// Calls the delegate when the user has finished the change of the range.
/// \param minValueSelected the minimum value selected.
///
/// \param maxValueSelected the maximum value selected.
///
/// \param slider the slider on which the range has been modified.
///
- (void)rangeChangeFinishedWithMinValueSelected:(CGFloat)minValueSelected maxValueSelected:(CGFloat)maxValueSelected slider:(RangeUISlider * _Nonnull)slider;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
